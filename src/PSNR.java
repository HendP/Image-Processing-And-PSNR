
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.text.DecimalFormat;
import javafx.scene.effect.GaussianBlur;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import static org.opencv.core.Core.BORDER_CONSTANT;
import static org.opencv.core.Core.BORDER_DEFAULT;
import org.opencv.core.CvType;
import static org.opencv.core.CvType.CV_32F;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author henhen
 */
public class PSNR extends javax.swing.JFrame {

    /**
     * Creates new form PSNR
     */
    public PSNR() {
        initComponents();
    }
    
    private static DecimalFormat df2 = new DecimalFormat(".##");
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imgResult = new javax.swing.JLabel();
        imgResource = new javax.swing.JLabel();
        btnPSNR = new javax.swing.JButton();
        btnMSE = new javax.swing.JButton();
        btnRMSE = new javax.swing.JButton();
        txtPath = new javax.swing.JTextField();
        PSNR = new javax.swing.JLabel();
        RMSE = new javax.swing.JLabel();
        MSE = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnBrowse1 = new javax.swing.JMenuItem();
        btnBrowse2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuMedianFilter = new javax.swing.JMenuItem();
        menuAveragingFilter = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        imgResult.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        imgResource.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnPSNR.setText("PSNR");
        btnPSNR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPSNRActionPerformed(evt);
            }
        });

        btnMSE.setText("MSE");
        btnMSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMSEActionPerformed(evt);
            }
        });

        btnRMSE.setText("RMSE");
        btnRMSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRMSEActionPerformed(evt);
            }
        });

        PSNR.setText("PSNR :");

        RMSE.setText("RMSE :");

        MSE.setText("MSE : ");

        jMenu1.setText("File");

        btnBrowse1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        btnBrowse1.setText("Browse Image 1");
        btnBrowse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowse1ActionPerformed(evt);
            }
        });
        jMenu1.add(btnBrowse1);

        btnBrowse2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        btnBrowse2.setText("Browse Image 2");
        btnBrowse2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowse2ActionPerformed(evt);
            }
        });
        jMenu1.add(btnBrowse2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Filter");

        menuMedianFilter.setText("Median Filter");
        menuMedianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMedianFilterActionPerformed(evt);
            }
        });
        jMenu2.add(menuMedianFilter);

        menuAveragingFilter.setText("Average Filter");
        menuAveragingFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAveragingFilterActionPerformed(evt);
            }
        });
        jMenu2.add(menuAveragingFilter);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(imgResource, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(imgResult, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
            .addGroup(layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(PSNR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(92, 92, 92)
                                .addComponent(RMSE, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(89, 89, 89)
                                .addComponent(MSE, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPSNR, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRMSE, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(89, 89, 89)
                                .addComponent(btnMSE, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(102, 102, 102))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imgResource, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgResult, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnMSE, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnPSNR, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRMSE, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PSNR)
                    .addComponent(RMSE)
                    .addComponent(MSE))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public ImageIcon ResizeImage(String ImagePath)
    {
        ImageIcon MyImage = new ImageIcon(ImagePath);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(imgResult.getWidth(), imgResult.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }
    
    //to set image size to icon on label
    public ImageIcon ResizeImageIcon(Image img)
    {
        Image newImg = img.getScaledInstance(imgResult.getWidth(), imgResult.getHeight(), img.SCALE_SMOOTH);
        ImageIcon icon = new ImageIcon(newImg);
        return icon;
    }
    
    //Convert Image To BufferdImage
    public Image convertToBufferedImage(Mat input)
    {
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if(input.channels() > 1)
        {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = input.channels()*input.cols()*input.rows();
        byte[] b = new byte[bufferSize];
        input.get(0, 0, b); //get all pixels
        BufferedImage img = new BufferedImage(input.cols(), input.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) img.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);
        return img;
    }
    
    public void toMedianFilter()
    {
        //Loading the OpenCV core library & get image for convert
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        
        String filepath = txtPath.getText();    

        //Instantiating the Imgcodecs class
        Imgcodecs imgcode = new Imgcodecs();
    
        //Reading Image
        Mat source = imgcode.imread(filepath);
        
        //Creating the destination matrix
        Mat destination = new Mat();
        
        // Applying MedianBlur on the Image
        Imgproc.medianBlur(source, destination, 15);
      
        //set the result of image
        Image toBlur = convertToBufferedImage(destination);
        imgResult.setIcon(ResizeImageIcon(toBlur));
        imgcode.imwrite("C:/Users/HenHen/Documents/NetBeansProjects/Image-Processing-And-PSNR/temp/result/result.png", destination);
        imgcode.imwrite("C:/Users/HenHen/Documents/NetBeansProjects/Image-Processing-And-PSNR/temp/source/source.png", source);
    }
    
    public void toAveraging()
    {
        //Loading the OpenCV core library & get image for convert
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        
        String filepath = txtPath.getText();
        
        //Instantiating the Imgcodecs and Core class
        Imgcodecs imgcode = new Imgcodecs();
        Core core = new Core();
        
        //Reading Image
        Mat source = imgcode.imread(filepath);
        
        //Creating the destination matrix
        Mat destination = new Mat();
        
        //declaration kernel
        Size kernelSize = new Size(3,3);
        
        //decalaration anchor
        Point anchor = new Point(-1,-1);
        
        // Applying Blur effect on the Image
        Imgproc.blur(source, destination, kernelSize, anchor, Core.BORDER_DEFAULT);
        
        //set the result of image
        Image toAveraging = convertToBufferedImage(destination);
        imgResult.setIcon(ResizeImageIcon(toAveraging));
        imgcode.imwrite("C:/Users/HenHen/Documents/NetBeansProjects/Image-Processing-And-PSNR/temp/result/result.png", destination);
        imgcode.imwrite("C:/Users/HenHen/Documents/NetBeansProjects/Image-Processing-And-PSNR/temp/source/source.png", source);
    }
    
    private void btnBrowse1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowse1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        //set directory default for browse image
        chooser.setCurrentDirectory(new File(System.getProperty("user.home") + System.getProperty("file.separator")+ "Pictures" ) );
        //filter file image
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg","png","gif");
        chooser.addChoosableFileFilter(filter);
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        txtPath.setText(filename);
        imgResource.setIcon(ResizeImage(filename));
    }//GEN-LAST:event_btnBrowse1ActionPerformed

    private void menuMedianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMedianFilterActionPerformed
        // TODO add your handling code here:
        toMedianFilter();
    }//GEN-LAST:event_menuMedianFilterActionPerformed

    private void btnPSNRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPSNRActionPerformed
        // TODO add your handling code here:
        
        //Loading the OpenCV core library & get image for convert
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        Mat Source = Imgcodecs.imread("C:/Users/HenHen/Documents/NetBeansProjects/Image-Processing-And-PSNR/temp/source/source.png");
        Mat Result = Imgcodecs.imread("C:/Users/HenHen/Documents/NetBeansProjects/Image-Processing-And-PSNR/temp/result/result.png");
        
        Double resultPSNR = Core.PSNR(Source, Result);
        String stringPSNR = String.format ("%.2f", resultPSNR);
        
        PSNR.setText("PSNR : "+ stringPSNR);
    }//GEN-LAST:event_btnPSNRActionPerformed

    private void btnRMSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRMSEActionPerformed
        // TODO add your handling code here:
        
        //Loading the OpenCV core library & get image for convert
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        Mat Source = Imgcodecs.imread("C:/Users/HenHen/Documents/NetBeansProjects/Image-Processing-And-PSNR/temp/source/source.png");
        Mat Result = Imgcodecs.imread("C:/Users/HenHen/Documents/NetBeansProjects/Image-Processing-And-PSNR/temp/result/result.png");
        
        Double resultRMSE = Math.sqrt(getMSE(Source, Result));
        String stringRMSE = String.format ("%.2f", resultRMSE);
       
        RMSE.setText("RMSE : "+ stringRMSE);
    }//GEN-LAST:event_btnRMSEActionPerformed

    private void btnMSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMSEActionPerformed
        // TODO add your handling code here:
        //Loading the OpenCV core library & get image for convert
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        Mat Source = Imgcodecs.imread("C:/Users/HenHen/Documents/NetBeansProjects/Image-Processing-And-PSNR/temp/source/source.png");
        Mat Result = Imgcodecs.imread("C:/Users/HenHen/Documents/NetBeansProjects/Image-Processing-And-PSNR/temp/result/result.png");
        
        Double resultMSE = getMSE(Source, Result);
        String stringMSE = String.format("%.2f", resultMSE);

        MSE.setText("MSE : "+ stringMSE);
    }//GEN-LAST:event_btnMSEActionPerformed
    
    
    
    private void menuAveragingFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAveragingFilterActionPerformed
        // TODO add your handling code here:
        toAveraging();
    }//GEN-LAST:event_menuAveragingFilterActionPerformed

    private void btnBrowse2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowse2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        //set directory default for browse image
        chooser.setCurrentDirectory(new File(System.getProperty("user.home") + System.getProperty("file.separator")+ "Pictures" ) );
        //filter file image
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg","png","gif");
        chooser.addChoosableFileFilter(filter);
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        txtPath.setText(filename);
        imgResult.setIcon(ResizeImage(filename));
    }//GEN-LAST:event_btnBrowse2ActionPerformed

    public double getMSE(Mat img1, Mat img2)
    {
        Mat s1 = new Mat();
        Core.absdiff(img1, img2, s1); // |I1 - I2|
        s1.convertTo(s1, CvType.CV_32F); // cannot make a square on 8 bits
        s1 = s1.mul(s1); // |I1 - I2|^2
         
        Scalar s = Core.sumElems(s1); // sum element per channel
        
        double sse = s.val[0] + s.val[1] + s.val[2]; //sum channels
        
        if(sse <= 1e-10) // for small values return zero
            return 0;
        else
        {
            double mse  = sse / (double)(img1.channels() * img1.total());
            double psnr = 10.0 * Math.log10((255 * 255) / mse);
            return mse;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PSNR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PSNR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PSNR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PSNR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PSNR().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MSE;
    private javax.swing.JLabel PSNR;
    private javax.swing.JLabel RMSE;
    private javax.swing.JMenuItem btnBrowse1;
    private javax.swing.JMenuItem btnBrowse2;
    private javax.swing.JButton btnMSE;
    private javax.swing.JButton btnPSNR;
    private javax.swing.JButton btnRMSE;
    private javax.swing.JLabel imgResource;
    private javax.swing.JLabel imgResult;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem menuAveragingFilter;
    private javax.swing.JMenuItem menuMedianFilter;
    public static javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables
}
